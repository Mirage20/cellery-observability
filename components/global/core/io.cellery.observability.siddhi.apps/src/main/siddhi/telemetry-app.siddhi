/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

@App:name("telemetry-app")
@App:description("Cellery Telemetry app for processing and storing http requests")

@source(type="inMemory", topic="istio-mixer-report", @map(type="passThrough"))
define stream TelemetryStreamIn(requestId string, traceId string, spanId string, parentSpanId string, sourceNamespace string,
                                sourceInstance string, sourceInstanceKind string, sourceComponent string,
                                sourcePod string, destinationNamespace string, destinationInstance string,
                                destinationInstanceKind string, destinationComponent string, destinationPod string,
                                contextReporterKind string, requestPath string, requestMethod string,
                                requestSizeBytes long, responseCode long, responseDurationNanoSec long,
                                responseSizeBytes long);

define stream ProcessedRequestsStream(sourceNamespace string, sourceInstance string, sourceInstanceKind string,
                                      sourceComponent string, destinationNamespace string, destinationInstance string,
                                      destinationInstanceKind string, destinationComponent string,
                                      httpResponseGroup string, responseTimeMilliSec double, requestSizeBytes long,
                                      responseSizeBytes long);

@store(type="rdbms", datasource="CELLERY_OBSERVABILITY_DB", field.length="sourceNamespace: 253, sourceInstance:253, sourceInstanceKind:9, sourceComponent:253, destinationNamespace:253, destinationInstance:253, destinationInstanceKind:9, destinationComponent: 253, httpResponseGroup:3")
@purge(enable="false")
define aggregation RequestAggregation from ProcessedRequestsStream
select
    sourceNamespace,
    sourceInstance,
    sourceInstanceKind,
    sourceComponent,
    destinationNamespace,
    destinationInstance,
    destinationInstanceKind,
    destinationComponent,
    httpResponseGroup,
    sum(responseTimeMilliSec) as totalResponseTimeMilliSec,
    sum(requestSizeBytes) as totalRequestSizeBytes,
    sum(responseSizeBytes) as totalResponseSizeBytes,
    count() as requestCount
group by
    sourceNamespace, sourceInstance, sourceComponent, destinationNamespace, destinationInstance, destinationComponent, httpResponseGroup
aggregate every sec...year;

-- Removing duplications of the metrics.
from TelemetryStreamIn#telemetry:deduplicate(60 sec, traceId, spanId, parentSpanId, sourceNamespace, sourceInstance,
                    sourceComponent, destinationNamespace, destinationInstance, destinationComponent, requestSizeBytes,
                    responseDurationNanoSec, responseSizeBytes)
insert into DeduplicatedTelemetryStream;

--
-- Storing the data received from Istio Telemetry
--

from DeduplicatedTelemetryStream
select
    sourceNamespace,
    sourceInstance,
    sourceInstanceKind,
    sourceComponent,
    destinationNamespace,
    destinationInstance,
    destinationInstanceKind,
    destinationComponent,
    str:concat(convert(cast(responseCode, "int") / 100, "string"), "xx") as httpResponseGroup,
    convert(responseDurationNanoSec, "double") / 1000000 as responseTimeMilliSec,
    ifThenElse(requestSizeBytes is null, 0L, requestSizeBytes) as requestSizeBytes,
    ifThenElse(responseSizeBytes is null, 0L, responseSizeBytes) as responseSizeBytes
insert into ProcessedTelemetryStream;

from ProcessedTelemetryStream[(not httpResponseGroup is null) and (not responseTimeMilliSec is null)
                             and (not requestSizeBytes is null) and (not responseSizeBytes is null)]
insert into ProcessedRequestsStream;

from ProcessedTelemetryStream#observe:modelGenerator(sourceNamespace, sourceInstance, sourceComponent,
    sourceInstanceKind, destinationNamespace, destinationInstance, destinationComponent, destinationInstanceKind)
insert into DummyStream;
